<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">

  <!--
  Setter Injection via property tag
  <bean id="messageRenderer" class="com.apress.prospring4.ch3.StandardOutMessageRenderer">
    <property name="messageProvider" ref="messageProvider"/>
  </bean>
  -->

  <!--
  Setter Injection via "p" namespace
  <bean id="messageRenderer" class="com.apress.prospring4.ch3.StandardOutMessageRenderer"
        p:messageProvider-ref="messageProvider"/>

  <bean id="messageProvider" class="com.apress.prospring4.ch3.xml.HelloWorldMessageProvider"/>
  -->

  <!--
  Constructor Injection via constructor-arg tag
  <bean id="messageProvider" class="com.apress.prospring4.ch3.xml.ConfigurableMessageProvider">
    <constructor-arg value="Configurable message!"/>
  </bean>
  -->

  <!-- Constructor Injection via "c" namespace -->
  <!--
  <bean id="messageProvider"
        class="com.apress.prospring4.ch3.xml.ConfigurableMessageProvider"
        c:message="Configurable Message via c namespace"/>
  -->

  <!--
  Constructor Confusion example
  <bean id="constructorConfusion" class="com.apress.prospring4.ch3.xml.ConstructorConfusion">
    <constructor-arg type="int" value="90"/>
  </bean>
  -->

  <!--
  Injecting simple values
  <bean id="injectSimple" class="com.apress.prospring4.ch3.xml.InjectSimple"
        p:name="Chris Schaefer" p:age="32" p:ageInSeconds="100000000" p:height="1.7"
        p:programmer="true"/>
  -->

  <!--
  Injecting values by using SpEL
  <bean id="injectSimpleConfig" class="com.apress.prospring4.ch3.xml.InjectSimpleConfig"/>

  <bean id="injectSimpleSpel" class="com.apress.prospring4.ch3.xml.InjectSimpleSpel"
        p:name="#{injectSimpleConfig.name + ' (Spel from XML)'}"
        p:age="#{injectSimpleConfig.age + 1}"
        p:programmer="#{injectSimpleConfig.programmer}"
        p:ageInSeconds="#{injectSimpleConfig.ageInSeconds}"
        p:height="#{injectSimpleConfig.height}"/>
  -->

  <!--
  Injecting Bean in the Same XML Unit
  <bean id="oracle" name="wiseworm" class="com.apress.prospring4.ch3.BookwormOracle"/>

  <bean id="injectRef" class="com.apress.prospring4.ch3.xml.InjectRef">
    <property name="oracle" ref="wiseworm"/>
  </bean>
  -->

  <!--
  Injection and ApplicationContext Nesting
  <bean id="target1" class="com.apress.prospring4.ch3.SimpleTarget" p:val-ref="injectBeanParent"/>

  <bean id="target2" class="com.apress.prospring4.ch3.SimpleTarget" p:val-ref="injectBean"/>

  <bean id="target3" class="com.apress.prospring4.ch3.SimpleTarget">
    <property name="val">
      <ref parent="injectBean"/>
    </property>
  </bean>

  <bean id="injectBean" class="java.lang.String" c:_0="Bean In Child"/>
  -->

  <bean id="oracle" name="wiseworm" class="com.apress.prospring4.ch3.BookwormOracle"/>

  <bean id="injectCollection" class="com.apress.prospring4.ch3.xml.CollectionInjection">
    <property name="map">
      <map>
        <entry key="someValue" value="Hello World!"/>
        <entry key="someBean" value-ref="oracle"/>
      </map>
    </property>

    <property name="props">
      <props>
        <prop key="firstName">Chris</prop>
        <prop key="secondName">Schaefer</prop>
      </props>
    </property>

    <property name="set">
      <set>
        <value>Hello World!</value>
        <ref bean="oracle"/>
      </set>
    </property>

    <property name="list">
      <list>
        <value>Hello World!</value>
        <ref bean="oracle"/>
      </list>
    </property>
  </bean>
</beans>